name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  backend-build-and-test:
    name: Backend Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'temurin'
    
    # Exécuter Maven avec Jacoco pour la couverture de code
    - name: Build and test backend with coverage
      run: |
        cd back
        mvn clean verify jacoco:report
    
    # Archiver les rapports de test et de couverture
    - name: Archive backend test and coverage reports
      uses: actions/upload-artifact@v2
      with:
        name: backend-reports
        path: |
          back/target/surefire-reports/
          back/target/site/jacoco/
        retention-days: 5
    
    # Build Docker image
    - name: Build backend Docker image
      run: |
        cd back
        docker build -t bobapp-back .
  
  frontend-build-and-test:
    name: Frontend Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16'
    
    - name: Install Chrome for Karma tests
      uses: browser-actions/setup-chrome@latest
    
    # Installer les dépendances, exécuter les tests avec couverture
    - name: Install dependencies and test with coverage
      run: |
        cd front
        npm install
        npm run test -- --no-watch --browsers=ChromeHeadless --code-coverage
    
    # Archiver les rapports de test et de couverture
    - name: Archive frontend test and coverage reports
      uses: actions/upload-artifact@v2
      with:
        name: frontend-reports
        path: |
          front/coverage/
        retention-days: 5
    
    # Build Docker image
    - name: Build frontend Docker image
      run: |
        cd front
        docker build -t bobapp-front .

  docker-test:
    name: Test Docker Containers
    needs: [backend-build-and-test, frontend-build-and-test]
    runs-on: ubuntu-latest
    
    steps:
    - name: Test Docker containers
      run: |
        # Démarrer le conteneur frontend
        docker run -p 8080:8080 --name bobapp-front -d bobapp-front
        echo "Frontend container started on port 8080"
        
        # Démarrer le conteneur backend
        docker run -p 9080:8080 --name bobapp-back -d bobapp-back
        echo "Backend container started on port 9080"
        
        # Vérifier que les conteneurs sont en cours d'exécution
        docker ps
        
        # Nettoyer les conteneurs après le test
        docker stop bobapp-front bobapp-back
        docker rm bobapp-front bobapp-back

  report-summary:
    name: Generate Summary Report
    needs: [backend-build-and-test, frontend-build-and-test]
    runs-on: ubuntu-latest
    
    steps:
    - name: Download all reports
      uses: actions/download-artifact@v2
      with:
        path: reports
    
    - name: Generate coverage report summary
      run: |
        echo "# Test and Coverage Report" > summary.txt
        echo "## Backend (Java)" >> summary.txt
        
        # Backend coverage report
        if [ -f "reports/backend-reports/site/jacoco/index.html" ]; then
          JAVA_COVERAGE=$(grep -o "Total[^%]*%" reports/backend-reports/site/jacoco/index.html | head -1 | tr -d " \t\n\r" || echo "N/A")
          echo "- Backend Code Coverage: $JAVA_COVERAGE" >> summary.txt
        else
          echo "- Backend Code Coverage: No data available" >> summary.txt
        fi
        
        # Backend test results
        if [ -d "reports/backend-reports/surefire-reports" ]; then
          TEST_COUNT=$(ls reports/backend-reports/surefire-reports/*.xml | wc -l)
          FAILED_COUNT=$(grep -l "<failure" reports/backend-reports/surefire-reports/*.xml 2>/dev/null | wc -l)
          echo "- Backend Tests: $((TEST_COUNT - FAILED_COUNT)) passed, $FAILED_COUNT failed of $TEST_COUNT total" >> summary.txt
        else
          echo "- Backend Tests: No data available" >> summary.txt
        fi
        
        echo "## Frontend (Angular)" >> summary.txt
        
        # Frontend coverage report
        if [ -f "reports/frontend-reports/coverage/index.html" ]; then
          TS_COVERAGE=$(grep -o "statements.*%" reports/frontend-reports/coverage/index.html | head -1 | grep -o "[0-9]*\.[0-9]*%" || echo "N/A")
          echo "- Frontend Code Coverage: $TS_COVERAGE" >> summary.txt
        else
          echo "- Frontend Code Coverage: No data available" >> summary.txt
        fi
        
        cat summary.txt
    
    - name: Upload summary report
      uses: actions/upload-artifact@v2
      with:
        name: test-coverage-summary
        path: summary.txt
        retention-days: 5