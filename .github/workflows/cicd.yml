name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    # Configuration Java
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven
    
    # Configuration Node.js
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'
        cache: 'npm'
        cache-dependency-path: './front/package-lock.json'
    
    # Build Backend
    - name: Build Backend
      run: mvn clean package -DskipTests
      working-directory: ./back
    
    # Build Frontend
    - name: Install Frontend dependencies
      run: npm ci
      working-directory: ./front
      
    - name: Build Frontend
      run: npm run build -- --prod
      working-directory: ./front
    
    # Login to Docker Hub
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    # Build and Push Docker images
    - name: Build and push Frontend Docker image
      run: |
        # Déterminer le tag basé sur la branche
        if [ "${{ github.ref }}" == "refs/heads/main" ]; then
          ENV_TAG="production"
        else
          ENV_TAG="staging"
        fi
        
        # Construire l'image Docker pour le frontend
        echo "Building Frontend Docker image..."
        cd ./front
        docker build -t bobapp-front:latest -t bobapp-front:$ENV_TAG .
        
        # Pousser les images sur Docker Hub (si nécessaire)
        if [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ]; then
          REPO="${{ secrets.DOCKERHUB_USERNAME }}/bobapp-front"
          docker tag bobapp-front:latest $REPO:latest
          docker tag bobapp-front:$ENV_TAG $REPO:$ENV_TAG
          docker push $REPO:latest
          docker push $REPO:$ENV_TAG
          echo "Images pushed to Docker Hub: $REPO:latest, $REPO:$ENV_TAG"
        fi
    
    # Build and Push Backend Docker image (similaire au frontend)
    - name: Build and push Backend Docker image
      run: |
        # Déterminer le tag basé sur la branche
        if [ "${{ github.ref }}" == "refs/heads/main" ]; then
          ENV_TAG="production"
        else
          ENV_TAG="staging"
        fi
        
        # Construire l'image Docker pour le backend
        echo "Building Backend Docker image..."
        cd ./back
        docker build -t bobapp-back:latest -t bobapp-back:$ENV_TAG .
        
        # Pousser les images sur Docker Hub (si nécessaire)
        if [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ]; then
          REPO="${{ secrets.DOCKERHUB_USERNAME }}/bobapp-back"
          docker tag bobapp-back:latest $REPO:latest
          docker tag bobapp-back:$ENV_TAG $REPO:$ENV_TAG
          docker push $REPO:latest
          docker push $REPO:$ENV_TAG
          echo "Images pushed to Docker Hub: $REPO:latest, $REPO:$ENV_TAG"
        fi
    
    # Déploiement (exemple pour un serveur distant via SSH)
    - name: Deploy to server
      if: success() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        SERVER_HOST: ${{ secrets.SERVER_HOST }}
        SERVER_USER: ${{ secrets.SERVER_USER }}
      run: |
        # Déterminer l'environnement de déploiement
        if [ "${{ github.ref }}" == "refs/heads/main" ]; then
          ENV="production"
          PORT="8080"
        else
          ENV="staging"
          PORT="8081"  # Port différent pour l'environnement de staging
        fi
        
        # Vérifier si les secrets de connexion SSH sont présents
        if [ -z "$SSH_PRIVATE_KEY" ] || [ -z "$SERVER_HOST" ] || [ -z "$SERVER_USER" ]; then
          echo "SSH deployment secrets not configured. Skipping deployment."
          exit 0
        fi
        
        # Configuration SSH
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H $SERVER_HOST >> ~/.ssh/known_hosts
        
        # Commandes pour le déploiement
        # Option 1: Si vous utilisez Docker Hub
        if [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ]; then
          FRONT_IMAGE="${{ secrets.DOCKERHUB_USERNAME }}/bobapp-front:$ENV"
          BACK_IMAGE="${{ secrets.DOCKERHUB_USERNAME }}/bobapp-back:$ENV"
          
          ssh $SERVER_USER@$SERVER_HOST "docker pull $FRONT_IMAGE && \
                                         docker pull $BACK_IMAGE && \
                                         docker stop bobapp-front-$ENV || true && \
                                         docker rm bobapp-front-$ENV || true && \
                                         docker stop bobapp-back-$ENV || true && \
                                         docker rm bobapp-back-$ENV || true && \
                                         docker run -d -p $PORT:8080 --name bobapp-front-$ENV $FRONT_IMAGE && \
                                         docker run -d -p $((PORT+1000)):8080 --name bobapp-back-$ENV $BACK_IMAGE"
        # Option 2: Transférer et déployer les images localement
        else
          # Sauvegarde des images en fichiers
          docker save bobapp-front:$ENV | gzip > bobapp-front.tar.gz
          docker save bobapp-back:$ENV | gzip > bobapp-back.tar.gz
          
          # Transfert des images
          scp bobapp-front.tar.gz bobapp-back.tar.gz $SERVER_USER@$SERVER_HOST:/tmp/
          
          # Chargement et démarrage des containers
          ssh $SERVER_USER@$SERVER_HOST "docker load < /tmp/bobapp-front.tar.gz && \
                                         docker load < /tmp/bobapp-back.tar.gz && \
                                         docker stop bobapp-front-$ENV || true && \
                                         docker rm bobapp-front-$ENV || true && \
                                         docker stop bobapp-back-$ENV || true && \
                                         docker rm bobapp-back-$ENV || true && \
                                         docker run -d -p $PORT:8080 --name bobapp-front-$ENV bobapp-front:$ENV && \
                                         docker run -d -p $((PORT+1000)):8080 --name bobapp-back-$ENV bobapp-back:$ENV && \
                                         rm /tmp/bobapp-front.tar.gz /tmp/bobapp-back.tar.gz"
        fi
        
        echo "Deployment to $ENV environment completed"
      
    # Notification de déploiement
    - name: Notify deployment status
      if: always()
      run: |
        # Déterminer l'environnement de déploiement
        if [ "${{ github.ref }}" == "refs/heads/main" ]; then
          ENV="PRODUCTION"
        else
          ENV="STAGING"
        fi
        
        STATUS="SUCCESS ✅"
        if [ "${{ job.status }}" != "success" ]; then
          STATUS="FAILED ❌"
        fi
        
        echo "Deployment to $ENV: $STATUS"