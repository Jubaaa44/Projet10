name: SonarCloud Analysis

on:
  push:
    branches: [ main, develop ]
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  build-and-analyze:
    name: Build and analyze
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'
      
      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      
      - name: Build backend and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          cd back
          mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=Jubaaa44_Projet10
      
      # Configuration de Node.js pour le frontend
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'
      
      # Exécution des tests frontend avec couverture
      - name: Build and test frontend
        run: |
          cd front
          npm install
          npm run test -- --no-watch --browsers=ChromeHeadless --code-coverage
        continue-on-error: true  # Pour ne pas bloquer le workflow si les tests échouent
      
      # Analyse SonarCloud du frontend
      - name: Analyze frontend with SonarCloud
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: front
          args: >
            -Dsonar.projectKey=Jubaaa44_Projet10_frontend
            -Dsonar.organization=projet10
            -Dsonar.sources=src
            -Dsonar.tests=src
            -Dsonar.test.inclusions=**/*.spec.ts
            -Dsonar.typescript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.projectName="Projet10 Frontend"
      
      # Construction des images Docker
      - name: Build Docker images
        run: |
          # Construction de l'image frontend
          cd front
          docker build -t bobapp-front .
          
          # Construction de l'image backend
          cd ../back
          docker build -t bobapp-back .
      
      # Test des images Docker
      - name: Test Docker containers
        run: |
          # Démarrer le conteneur frontend
          docker run -p 8080:8080 --name bobapp-front -d bobapp-front
          echo "Frontend container started on port 8080"
          
          # Démarrer le conteneur backend
          docker run -p 9080:8080 --name bobapp-back -d bobapp-back
          echo "Backend container started on port 9080"
          
          # Vérifier que les conteneurs sont en cours d'exécution
          docker ps
          
          # Nettoyer les conteneurs après le test
          docker stop bobapp-front bobapp-back
          docker rm bobapp-front bobapp-back