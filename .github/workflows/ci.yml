name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  # Permet de d√©clencher le workflow manuellement depuis l'interface GitHub
  workflow_dispatch:

jobs:
  backend-test:
    name: Backend Tests (Java 11 + Spring Boot)
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven
    
    - name: Build and run tests with Maven
      run: mvn -B test jacoco:report
      working-directory: ./backend  # Ajustez ce chemin selon la structure de votre projet
    
    - name: Upload JaCoCo coverage report
      uses: actions/upload-artifact@v3
      with:
        name: jacoco-report
        path: backend/target/site/jacoco/
    
    - name: Check for test failures
      id: test-check
      run: |
        if [ -f backend/target/surefire-reports/*.xml ]; then
          echo "Tests completed, checking for failures..."
          FAILURES=$(grep -l "<failure" backend/target/surefire-reports/*.xml | wc -l)
          if [ $FAILURES -gt 0 ]; then
            echo "Found $FAILURES test failures"
            echo "test_failures=$FAILURES" >> $GITHUB_OUTPUT
          else
            echo "All tests passed successfully!"
            echo "test_failures=0" >> $GITHUB_OUTPUT
          fi
        else
          echo "No test reports found!"
          echo "test_failures=-1" >> $GITHUB_OUTPUT
        fi
    
    - name: Generate test failure report
      if: steps.test-check.outputs.test_failures != '0'
      run: |
        echo "# Backend Test Failures Report" > backend-test-report.md
        echo "## Summary" >> backend-test-report.md
        echo "- Total failures: ${{ steps.test-check.outputs.test_failures }}" >> backend-test-report.md
        echo "- Date: $(date)" >> backend-test-report.md
        echo "## Detailed Failures" >> backend-test-report.md
        
        for file in backend/target/surefire-reports/*.xml; do
          if grep -q "<failure" $file; then
            TEST_CLASS=$(grep "testcase classname" $file | head -1 | sed 's/.*classname="\([^"]*\)".*/\1/')
            echo "### Test Class: $TEST_CLASS" >> backend-test-report.md
            
            grep -A 3 "<failure" $file | while read -r line; do
              echo "- $line" >> backend-test-report.md
            done
            
            echo "" >> backend-test-report.md
          fi
        done
    
    - name: Upload backend test failure report
      if: steps.test-check.outputs.test_failures != '0'
      uses: actions/upload-artifact@v3
      with:
        name: backend-test-failure-report
        path: backend-test-report.md

  frontend-test:
    name: Frontend Tests (Angular)
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'  # Ajustez ce chemin selon la structure de votre projet
    
    - name: Install dependencies
      run: npm ci
      working-directory: ./frontend  # Ajustez ce chemin selon la structure de votre projet
    
    - name: Run Angular tests
      run: npm run test -- --no-watch --no-progress --browsers=ChromeHeadless
      working-directory: ./frontend
    
    - name: Check for test failures
      id: angular-test-check
      run: |
        if [ -f frontend/karma-results.json ]; then
          echo "Tests completed, checking for failures..."
          FAILURES=$(grep -o "\"failed\": [1-9][0-9]*" frontend/karma-results.json | sed 's/"failed": //')
          if [ ! -z "$FAILURES" ] && [ "$FAILURES" -gt 0 ]; then
            echo "Found $FAILURES test failures"
            echo "test_failures=$FAILURES" >> $GITHUB_OUTPUT
          else
            echo "All tests passed successfully!"
            echo "test_failures=0" >> $GITHUB_OUTPUT
          fi
        else
          echo "No test reports found!"
          echo "test_failures=-1" >> $GITHUB_OUTPUT
        fi
      
    - name: Generate frontend test failure report
      if: steps.angular-test-check.outputs.test_failures != '0'
      run: |
        echo "# Frontend Test Failures Report" > frontend-test-report.md
        echo "## Summary" >> frontend-test-report.md
        echo "- Total failures: ${{ steps.angular-test-check.outputs.test_failures }}" >> frontend-test-report.md
        echo "- Date: $(date)" >> frontend-test-report.md
        echo "## Detailed Failures" >> frontend-test-report.md
        
        if [ -f frontend/karma-results.json ]; then
          cat frontend/karma-results.json | jq -r '.browsers[] | select(.results.failed > 0) | "### Browser: \(.name)\n\(.results.failedTests[] | "- Test: \(.name)\n  - Error: \(.log[0])")"' >> frontend-test-report.md
        else
          echo "No detailed test results available" >> frontend-test-report.md
        fi
    
    - name: Upload frontend test failure report
      if: steps.angular-test-check.outputs.test_failures != '0'
      uses: actions/upload-artifact@v3
      with:
        name: frontend-test-failure-report
        path: frontend-test-report.md

  generate-combined-report:
    name: Generate Combined Test Report
    needs: [backend-test, frontend-test]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Download backend test report
      uses: actions/download-artifact@v3
      with:
        name: backend-test-failure-report
        path: reports
      continue-on-error: true
      
    - name: Download frontend test report
      uses: actions/download-artifact@v3
      with:
        name: frontend-test-failure-report
        path: reports
      continue-on-error: true
      
    - name: Download JaCoCo coverage report
      uses: actions/download-artifact@v3
      with:
        name: jacoco-report
        path: reports/jacoco
      continue-on-error: true
      
    - name: Generate combined report
      run: |
        echo "# Combined Test Report" > combined-report.md
        echo "## Summary" >> combined-report.md
        echo "- Job ran on: $(date)" >> combined-report.md
        echo "- Repository: ${{ github.repository }}" >> combined-report.md
        echo "- Branch: ${{ github.ref_name }}" >> combined-report.md
        echo "- Commit: ${{ github.sha }}" >> combined-report.md
        echo "" >> combined-report.md
        
        if [ -f reports/backend-test-report.md ]; then
          echo "## Backend Test Results" >> combined-report.md
          cat reports/backend-test-report.md | sed '1,2d' >> combined-report.md
          echo "" >> combined-report.md
        else
          echo "## Backend Tests" >> combined-report.md
          echo "All tests passed or no test results available." >> combined-report.md
          echo "" >> combined-report.md
        fi
        
        if [ -f reports/frontend-test-report.md ]; then
          echo "## Frontend Test Results" >> combined-report.md
          cat reports/frontend-test-report.md | sed '1,2d' >> combined-report.md
          echo "" >> combined-report.md
        else
          echo "## Frontend Tests" >> combined-report.md
          echo "All tests passed or no test results available." >> combined-report.md
          echo "" >> combined-report.md
        fi
        
        if [ -d reports/jacoco ]; then
          echo "## Coverage Report" >> combined-report.md
          echo "JaCoCo coverage report is available as an artifact." >> combined-report.md
          
          if [ -f reports/jacoco/index.html ]; then
            # Extraire les statistiques de couverture de code si possible
            COVERAGE=$(grep -o "Total[^%]*%" reports/jacoco/index.html | head -1 | tr -d " \t\n\r")
            if [ ! -z "$COVERAGE" ]; then
              echo "- Coverage: $COVERAGE" >> combined-report.md
            fi
          fi
        fi
        
    - name: Upload combined report
      uses: actions/upload-artifact@v3
      with:
        name: combined-test-report
        path: combined-report.md
        
    - name: Post report as comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('combined-report.md', 'utf8');
          const context = github.context;
          
          github.rest.issues.createComment({
            issue_number: context.payload.pull_request.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: report
          });
