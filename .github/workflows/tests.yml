name: Exécution Tests

on:
  workflow_call:
  workflow_dispatch:

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'temurin'
    
    - name: Run backend tests
      run: |
        cd back
        mvn clean install
        mvn clean verify
    
    # Création et archivage des rapports de tests backend
    - name: Prepare backend test reports
      if: always()
      run: |
        mkdir -p test-reports/backend
        
        # Copier les rapports s'ils existent
        if [ -d "back/target/surefire-reports" ]; then
          cp -r back/target/surefire-reports test-reports/backend/
        fi
        
        if [ -d "back/target/site/jacoco" ]; then
          cp -r back/target/site/jacoco test-reports/backend/
        fi
        
        # Créer un fichier index.html simple
        echo "<html><head><title>Backend Test Reports</title></head><body>" > test-reports/backend/index.html
        echo "<h1>Backend Test Reports</h1>" >> test-reports/backend/index.html
        
        if [ -d "test-reports/backend/surefire-reports" ]; then
          echo "<h2>Test Results</h2><p><a href='surefire-reports'>View Test Results</a></p>" >> test-reports/backend/index.html
        fi
        
        if [ -d "test-reports/backend/jacoco" ]; then
          echo "<h2>Coverage Report</h2><p><a href='jacoco/index.html'>View Coverage Report</a></p>" >> test-reports/backend/index.html
        fi
        
        echo "</body></html>" >> test-reports/backend/index.html
        
        # Créer une archive zip pour GitHub Actions
        cd test-reports
        zip -r ../backend-test-reports.zip backend
        cd ..
    
    # Téléverser l'archive en tant qu'artefact GitHub
    - name: Upload backend test reports
      if: always()
      run: |
        echo "::upload-artifact name=backend-test-reports::backend-test-reports.zip"
  
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16'
    
    - name: Install Chrome for Karma tests
      uses: browser-actions/setup-chrome@latest
    
    - name: Install dependencies and run tests
      run: |
        cd front
        npm install
        npm run test -- --no-watch --browsers=ChromeHeadless
    
    # Création et archivage des rapports de tests frontend
    - name: Prepare frontend test reports
      if: always()
      run: |
        mkdir -p test-reports/frontend
        
        # Copier les rapports s'ils existent
        if [ -d "front/coverage" ]; then
          cp -r front/coverage test-reports/frontend/
        fi
        
        # Créer un fichier index.html simple
        echo "<html><head><title>Frontend Test Reports</title></head><body>" > test-reports/frontend/index.html
        echo "<h1>Frontend Test Reports</h1>" >> test-reports/frontend/index.html
        
        if [ -d "test-reports/frontend/coverage" ]; then
          echo "<h2>Coverage Report</h2><p><a href='coverage/index.html'>View Coverage Report</a></p>" >> test-reports/frontend/index.html
        fi
        
        echo "</body></html>" >> test-reports/frontend/index.html
        
        # Créer une archive zip pour GitHub Actions
        cd test-reports
        zip -r ../frontend-test-reports.zip frontend
        cd ..
    
    # Téléverser l'archive en tant qu'artefact GitHub
    - name: Upload frontend test reports
      if: always()
      run: |
        echo "::upload-artifact name=frontend-test-reports::frontend-test-reports.zip"

  generate-summary:
    name: Generate Report Summary
    needs: [backend-tests, frontend-tests]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Generate summary
      run: |
        echo "# Test Reports" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "The test reports are available as artifacts in this workflow run." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## How to access the reports" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "1. Go to the 'Summary' tab of this workflow run" >> $GITHUB_STEP_SUMMARY
        echo "2. Scroll down to the 'Artifacts' section" >> $GITHUB_STEP_SUMMARY
        echo "3. Download the following artifacts:" >> $GITHUB_STEP_SUMMARY
        echo "   - backend-test-reports.zip" >> $GITHUB_STEP_SUMMARY
        echo "   - frontend-test-reports.zip" >> $GITHUB_STEP_SUMMARY
        echo "4. Extract the zip files locally" >> $GITHUB_STEP_SUMMARY
        echo "5. Open the 'index.html' file in your browser" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Direct links (if available)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- [Backend Test Reports](../backend-test-reports/index.html)" >> $GITHUB_STEP_SUMMARY
        echo "- [Frontend Test Reports](../frontend-test-reports/index.html)" >> $GITHUB_STEP_SUMMARY